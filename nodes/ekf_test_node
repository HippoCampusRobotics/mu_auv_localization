#!/usr/bin/env python

import numpy as np
from pyquaternion import Quaternion
import rospy
import rospkg
import tf

from hippocampus_common.node import Node
from mu_auv_localization.ekf_test_class import ExtendedKalmanFilter
from mu_auv_localization.meas_model_class import MeasurementModelDistances
from mu_auv_localization.process_model_class import ProcessModel

from geometry_msgs.msg import PoseStamped, TwistStamped, Transform
from apriltag_ros.msg import AprilTagDetectionArray
from sensor_msgs.msg import Imu
from numpy import genfromtxt
import threading

rospack = rospkg.RosPack()


class EKFNode(Node):
    def __init__(self):
        super(EKFNode, self).__init__("ekf_test_node")
        self.lock = threading.Lock()
        self.t_last_prediction = rospy.get_time()

        self.tf_transformer = tf.TransformerROS(interpolate=False)

        # get tag position for gazebo or real water tank
        try:
            calibration_type = rospy.get_param('~calibration')
        except KeyError:
            rospy.logerr("[{}] You have to set a calibration parameter".format(rospy.get_name()))
            exit(-1)

        if calibration_type == "gazebo":
            data_path = rospack.get_path(
                "mu_auv_localization"
            ) + '/scripts/calibration_ground_truth_gazebo.csv'  # in gazebo
            tags = genfromtxt(data_path, delimiter=',')  # home PC
            tags = tags[:, 0:4]
        elif calibration_type == "water_tank":
            # load tag poses from tag_poses.yaml file ->
            # todo: this *should* be the same in gazebo and real tank
            #  -> adjust this in gazebo?!
            tags = self._load_tag_poses()

        self.tags = tags

        self.meas_model_type = rospy.get_param('~measurement_model', 'dist')
        self.process_model_type = rospy.get_param('~process_model', 'standard')

        if self.meas_model_type == "dist" and self.process_model_type == "standard":
            dim_state, dim_meas, w_mat, v_mat, p0_mat, x0, \
                c_penalty_dist, c_penalty_yaw, w_mat_orient = self._load_ekf_params_dist()

            process_model = ProcessModel(dim_state, dim_meas, v_mat)
            measurement_model = MeasurementModelDistances(dim_state, dim_meas, w_mat, c_penalty_dist, c_penalty_yaw, w_mat_orient)
            self.ekf = ExtendedKalmanFilter(dim_state, dim_meas, measurement_model, process_model, x0, p0_mat)
        else:
            rospy.logerr("[{}] Choose valid measurement model.".format(rospy.get_name()))
            exit(-1)

        self.vision_pose_pub = rospy.Publisher("mavros/vision_pose/pose",
                                               PoseStamped,
                                               queue_size=1)
        self.estimated_pose_pub = rospy.Publisher('estimated_pose',
                                                  PoseStamped,
                                                  queue_size=1)
        self.twist_pub = rospy.Publisher('estimated_twist',
                                         TwistStamped,
                                         queue_size=1)

        rospy.Subscriber("mavros/local_position/pose",
                         PoseStamped,
                         self.orientation_callback,
                         queue_size=1)

        rospy.Subscriber("mavros/imu/data",
                         Imu,
                         self.imu_callback,
                         queue_size=1)

        rospy.Subscriber("tag_detections",
                         AprilTagDetectionArray,
                         self.apriltag_callback,
                         queue_size=1)

    def apriltag_callback(self, tag_array_msg):
        num_tags = len(tag_array_msg.detections)

        # if tags are detected
        if num_tags:

            if self.meas_model_type == "dist":
                # measurement for each tag consists of distance and yaw angle
                # -> dim_meas = 2
                measurements = np.zeros((num_tags * self.ekf.dim_meas, 1))
                detected_tags = np.zeros((num_tags, 4))

                for i, tag in enumerate(tag_array_msg.detections):
                    tag_id = int(tag.id[0])

                    # add this tag's information to list of detected tags
                    index = np.where(self.tags[:, 0] == tag_id)
                    detected_tags[i, :] = self.tags[index, 0:4]

                    # TODO "calibration"
                    tag_distance_cam = np.array(
                        ([
                            tag.pose.pose.pose.position.x * 1.05,
                            tag.pose.pose.pose.position.y * 1.1,
                            tag.pose.pose.pose.position.z
                        ])
                    )  # Achtung hier ist die 0.1 wegen der kamera position hinzugefuegt

                    tmpquat = Quaternion(w=tag.pose.pose.pose.orientation.w,
                                         x=tag.pose.pose.pose.orientation.x,
                                         y=tag.pose.pose.pose.orientation.y,
                                         z=tag.pose.pose.pose.orientation.z)

                    yaw_tag_cam = tmpquat.inverse.yaw_pitch_roll[0]
                    # print('tag id: ', tag.id, 'yaw_tag_cam', yaw_tag_cam)

                    # measurement 1: distance tag - camera
                    measurements[self.ekf.dim_meas * i, 0] = np.linalg.norm(tag_distance_cam)
                    # measurement 2: yaw angle tag - camera (todo check direction)
                    measurements[self.ekf.dim_meas * i + 1, 0] = yaw_tag_cam

            elif self.meas_model_type == "full_pose":

                # not complete yet

                # measurement for each tag consists of full pose measurement camera-tag
                # -> dim_meas = 7
                measurements = np.zeros((num_tags * self.ekf.dim_meas, 1))
                detected_tags = np.zeros((num_tags, 4))

                for i, tag in enumerate(tag_array_msg.detections):

                    tag_id = int(tag.id[0])

                    # add this tag's information to list of detected tags
                    index = np.where(self.tags[:, 0] == tag_id)
                    detected_tags[i, :] = self.tags[index, 0:4]

                    # TODO check "calibration", rewrite this
                    tag_distance_cam = np.array(
                        ([
                            tag.pose.pose.pose.position.x * 1.05,
                            tag.pose.pose.pose.position.y * 1.1,
                            tag.pose.pose.pose.position.z
                        ])
                    )  # Achtung hier ist die 0.1 wegen der kamera position hinzugefuegt

                    orientation = Quaternion(w=tag.pose.pose.pose.orientation.w,
                                             x=tag.pose.pose.pose.orientation.x,
                                             y=tag.pose.pose.pose.orientation.y,
                                             z=tag.pose.pose.pose.orientation.z)

                    # measurement: full pose, orientation not transformed yet!
                    measurements[(self.dim_meas * i):(self.dim_meas*(i + 1) - 1), 0] \
                        = np.array([tag_distance_cam[0], tag_distance_cam[1], tag_distance_cam[2], orientation[3],
                                    tag.pose.pose.pose.orientation.w, tag.pose.pose.pose.orientation.x,
                                    tag.pose.pose.pose.orientation.y, tag.pose.pose.pose.orientation.z]).reshape((-1, 1))

            # do prediction + update step of ekf
            with self.lock:
                now = rospy.get_time()
                self.ekf.predict(now - self.t_last_prediction)
                self.t_last_prediction = now
                self.ekf.update_vision_data(measurements, detected_tags)

            self._publish_pose_estimation()
            self._publish_twist_estimation()

    def orientation_callback(self, pose_msg):

        tmpquat = Quaternion(pose_msg.pose.orientation.w,
                             pose_msg.pose.orientation.x,
                             pose_msg.pose.orientation.y,
                             pose_msg.pose.orientation.z)

        yaw, pitch, roll = tmpquat.inverse.yaw_pitch_roll  # todo: check if correct
        # print('yaw from px4', yaw)
        measurements = np.array([roll, pitch]).reshape((-1, 1))

        with self.lock:
            now = rospy.get_time()
            self.ekf.predict(now - self.t_last_prediction)
            self.t_last_prediction = now
            self.ekf.update_orientation_data(measurements)

    def imu_callback(self, imu_msg):

        angular_vel = np.array([imu_msg.angular_velocity.x,
                                imu_msg.angular_velocity.y,
                                imu_msg.angular_velocity.z])

        # linear_acc = np.array([imu_msg.linear_acceleration.x,
        #                        imu_msg.linear_acceleration.y,
        #                        imu_msg.linear_acceleration.z])
        # measurements = np.array([angular_vel, linear_acc]).reshape((-1, 1))
        # # covariances
        # angular_vel_cov = np.asarray(imu_msg.angular_velocity_covariance).reshape((3, 3))
        # linear_acc_cov = np.asarray(imu_msg.linear_acceleration_covariance).reshape((3, 3))
        # # directly using covariances from /mavros/imu/data msg
        # w_mat_imu = np.block([[angular_vel_cov, np.zeros((3, 3))],
        #                       [np.zeros((3, 3)), linear_acc_cov]])

        # for now, only using body rates
        measurements = np.array([angular_vel]).reshape((-1, 1))
        w_mat_imu = np.asarray(imu_msg.angular_velocity_covariance).reshape((3, 3))

        with self.lock:
            now = rospy.get_time()
            self.ekf.predict(now - self.t_last_prediction)
            self.t_last_prediction = now
            self.ekf.update_imu_data(measurements, w_mat_imu)

    def _publish_pose_estimation(self):
        estimation = self.ekf.get_x_est()
        position = estimation[:3]
        orientation = estimation[3:6]
        # transform to quaternion
        qx, qy, qz, qw = self.ekf.roll_pitch_yaw_to_quat(orientation[0], orientation[1], orientation[2])
        p = PoseStamped()
        p.pose.position.x = position[0]
        p.pose.position.y = position[1]
        p.pose.position.z = position[2]
        p.pose.orientation.x = qx
        p.pose.orientation.y = qy
        p.pose.orientation.z = qz
        p.pose.orientation.w = qw
        p.header.stamp = rospy.Time.now()
        p.header.frame_id = "map"
        self.vision_pose_pub.publish(p)
        self.estimated_pose_pub.publish(p)

    def _publish_twist_estimation(self):
        estimation = self.ekf.get_x_est()

        t = TwistStamped()
        t.twist.linear.x = estimation[6]
        t.twist.linear.y = estimation[7]
        t.twist.linear.z = estimation[8]
        t.twist.angular.x = estimation[9]
        t.twist.angular.y = estimation[10]
        t.twist.angular.z = estimation[11]
        t.header.stamp = rospy.Time.now()
        # todo: frame id -> body
        self.twist_pub.publish(t)

    def _load_ekf_params_dist(self):

        dim_meas = EKFNode.get_param('~ekf/dim_meas')
        dim_state = EKFNode.get_param('~ekf/dim_state')

        # initial state
        x = self.get_param('~ekf/x0/x')
        y = self.get_param('~ekf/x0/y')
        z = self.get_param('~ekf/x0/z')
        roll = self.get_param('~ekf/x0/roll')
        pitch = self.get_param('~ekf/x0/pitch')
        yaw = self.get_param('~ekf/x0/yaw')
        dx = self.get_param('~ekf/x0/dx')
        dy = self.get_param('~ekf/x0/dy')
        dz = self.get_param('~ekf/x0/dz')
        droll = self.get_param('~ekf/x0/droll')
        dpitch = self.get_param('~ekf/x0/dpitch')
        dyaw = self.get_param('~ekf/x0/dyaw')

        x0 = np.array([x, y, z, roll, pitch, yaw, dx, dy, dz, droll, dpitch, dyaw]).reshape((-1, 1))

        # state covariance P0 params
        sig_x = self.get_param('~ekf/p_mat/sig_x')
        sig_y = self.get_param('~ekf/p_mat/sig_y')
        sig_z = self.get_param('~ekf/p_mat/sig_z')
        sig_roll = self.get_param('~ekf/p_mat/sig_roll')
        sig_pitch = self.get_param('~ekf/p_mat/sig_pitch')
        sig_yaw = self.get_param('~ekf/p_mat/sig_yaw')
        sig_dx = self.get_param('~ekf/p_mat/sig_dx')
        sig_dy = self.get_param('~ekf/p_mat/sig_dy')
        sig_dz = self.get_param('~ekf/p_mat/sig_dz')
        sig_droll = self.get_param('~ekf/p_mat/sig_droll')
        sig_dpitch = self.get_param('~ekf/p_mat/sig_dpitch')
        sig_dyaw = self.get_param('~ekf/p_mat/sig_dyaw')

        p0_mat = np.array(np.diag([sig_x ** 2, sig_y ** 2, sig_z ** 2, sig_roll ** 2, sig_pitch ** 2, sig_yaw ** 2,
                               sig_dx ** 2, sig_dy ** 2, sig_dz ** 2, sig_droll ** 2, sig_dpitch ** 2, sig_dyaw ** 2]))

        # process noise
        sig_v_x = self.get_param('~ekf/v_mat/sig_v_x')
        sig_v_y = self.get_param('~ekf/v_mat/sig_v_y')
        sig_v_z = self.get_param('~ekf/v_mat/sig_v_z')
        sig_v_roll = self.get_param('~ekf/v_mat/sig_v_roll')
        sig_v_pitch = self.get_param('~ekf/v_mat/sig_v_pitch')
        sig_v_yaw = self.get_param('~ekf/v_mat/sig_v_yaw')
        sig_v_dx = self.get_param('~ekf/v_mat/sig_v_dx')
        sig_v_dy = self.get_param('~ekf/v_mat/sig_v_dy')
        sig_v_dz = self.get_param('~ekf/v_mat/sig_v_dz')
        sig_v_droll = self.get_param('~ekf/v_mat/sig_v_droll')
        sig_v_dpitch = self.get_param('~ekf/v_mat/sig_v_dpitch')
        sig_v_dyaw = self.get_param('~ekf/v_mat/sig_v_dyaw')

        v_mat = np.array(np.diag([sig_v_x ** 2, sig_v_y ** 2, sig_v_z ** 2, sig_v_roll ** 2, sig_v_pitch ** 2, sig_v_yaw ** 2,
                              sig_v_dx ** 2, sig_v_dy ** 2, sig_v_dz ** 2, sig_v_droll ** 2, sig_v_dpitch ** 2, sig_v_dyaw ** 2]))

        # measurement noise
        sig_w_dist = self.get_param('~ekf/w_mat/sig_w_dist')
        sig_w_yaw = self.get_param('~ekf/w_mat/sig_w_yaw')

        c_penalty_dist = self.get_param('~ekf/w_mat/c_penalty_dist')
        c_penalty_yaw = self.get_param('~ekf/w_mat/c_penalty_yaw')

        w_mat = np.array(np.diag([sig_w_dist ** 2, sig_w_yaw ** 2]))

        # measurement noise orientation (using data from mavros/local_position/pose)
        sig_w_roll = self.get_param('~ekf/w_mat_orient/sig_w_roll')
        sig_w_pitch = self.get_param('~ekf/w_mat_orient/sig_w_pitch')

        w_mat_orient = np.array(np.diag([sig_w_roll ** 2, sig_w_pitch ** 2]))

        return dim_state, dim_meas, w_mat, v_mat, p0_mat, x0, c_penalty_dist, c_penalty_yaw, w_mat_orient

    def _load_tag_poses(self):

        tag_poses = rospy.get_param('~tag_poses')

        # initialize tags matrix: each row contains id, x, y, z, qw, qx, qy, qz for this tag
        # position and orientation in map frame
        tags = np.zeros((len(tag_poses), 8))

        for tag in tag_poses:
            # doesn't work with frame_id "map_ned" yet todo
            # to transform to map frame: write as ROS msg
            # gibt sicherlich auch direkteren weg
            p = PoseStamped()
            p.header.frame_id = str(tag['frame_id'])
            p.pose.position.x = tag['x']
            p.pose.position.y = tag['y']
            p.pose.position.z = tag['z']
            p.pose.orientation.x = tag['qx']
            p.pose.orientation.y = tag['qy']
            p.pose.orientation.z = tag['qz']
            p.pose.orientation.w = tag['qw']
            tag_pose_map = self.tf_transformer.transformPose(target_frame="map", ps=p)

            tags[tag['id'], :] = np.array([tag['id'],
                                           tag_pose_map.pose.position.x,
                                           tag_pose_map.pose.position.y,
                                           tag_pose_map.pose.position.z,
                                           tag_pose_map.pose.orientation.w,
                                           tag_pose_map.pose.orientation.x,
                                           tag_pose_map.pose.orientation.y,
                                           tag_pose_map.pose.orientation.z])

        return tags


def main():
    node = EKFNode()
    node.run()


if __name__ == '__main__':
    main()
